/**
 * @fileOverview Firestore Security Rules for the Sanskrit Verse Analysis App.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private data (user profiles and saved verses) and allows public read access to shared data (verses and daily shlokas).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the authenticated user.
 * - /users/{userId}/userVerses/{userVerseId}: Stores verses saved by a specific user, accessible only to that user.
 * - /verses/{verseId}: Stores all verses, publicly readable.
 * - /dailyShlokas/{dailyShlokaId}: Stores the Shloka of the Day, publicly readable.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Public read access is granted to the 'verses' and 'dailyShlokas' collections to facilitate content sharing and discovery.
 * - Write access to 'dailyShlokas' is completely disabled to all users, including authenticated ones.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data, ensuring only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their profile with matching userId.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - User attempts to create a profile with a mismatched userId.
     * @deny (get, update, delete) - User attempts to access another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get, update, delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow list: if false;
    }

    /**
     * @description Secures user-saved verses, ensuring only the owner can manage their saved verses.
     * @path /users/{userId}/userVerses/{userVerseId}
     * @allow (create) - Authenticated user saves a verse to their library.
     * @allow (get, update, delete) - Authenticated user accesses their saved verses.
     * @deny (create) - User attempts to save a verse to another user's library.
     * @deny (get, update, delete) - User attempts to access another user's saved verses.
     * @principle Enforces document ownership for all operations within a user's subcollection.
     */
    match /users/{userId}/userVerses/{userVerseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get, update, delete: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to all verses. Write access is disabled.
     * @path /verses/{verseId}
     * @allow (get, list) - Any user can read the verses.
     * @deny (create, update, delete) - No user can modify verses.
     * @principle Allows open reads while preventing unauthorized writes.
     */
    match /verses/{verseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to the Shloka of the Day. Write access is disabled.
     * @path /dailyShlokas/{dailyShlokaId}
     * @allow (get, list) - Any user can read the Shloka of the Day.
     * @deny (create, update, delete) - No user can modify the Shloka of the Day.
     * @principle Allows open reads while preventing unauthorized writes.
     */
    match /dailyShlokas/{dailyShlokaId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}