/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for personal data while allowing public read access to shared content.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only to the owning user.
 * - /users/{userId}/userVerses/{userVerseId}: Verses saved by a specific user, accessible only to that user.
 * - /verses/{verseId}: Publicly accessible verses.
 * - /dailyShlokas/{dailyShlokaId}: Publicly accessible daily shlokas.
 *
 * Key Security Decisions:
 * - User profiles and saved verses are strictly private and only accessible to the owning user.
 * - Public content (verses, daily shlokas) is readable by all users.
 * - Data types are NOT validated during this prototyping phase.
 *
 * Denormalization for Authorization:
 * - UserVerse documents are stored as a subcollection of the user's profile to ensure path-based ownership, simplifying security rules and eliminating the need for complex `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information. Only the owning user can read or write their profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the request is made by the user with the matching userId.
     *   Example: A user with UID 'user123' can read their profile at /users/user123.
     * @deny (get, create, update, delete) if the request is made by a different user.
     *   Example: A user with UID 'user456' cannot read the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Function to check if the request is from the owner.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Function to check if the request is from the owner and that resource exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is disabled for privacy.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to verses saved by a user. Only the owning user can read, create, update, or delete their saved verses.
     * @path /users/{userId}/userVerses/{userVerseId}
     * @allow (get, list, create, update, delete) if the request is made by the user with the matching userId.
     *   Example: A user with UID 'user123' can create a verse at /users/user123/userVerses/verse456.
     * @deny (get, list, create, update, delete) if the request is made by a different user.
     *   Example: A user with UID 'user456' cannot read the verse at /users/user123/userVerses/verse456.
     * @principle Enforces strict path-based ownership.
     */
    match /users/{userId}/userVerses/{userVerseId} {
      // Function to check if the request is from the owner.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Function to check if the request is from the owner and that resource exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to verses. Write access is not permitted in this prototyping phase.
     * @path /verses/{verseId}
     * @allow (get, list) to all users.
     *   Example: Any user can read a verse at /verses/verse123.
     * @deny (create, update, delete) to all users.
     *   Example: No user can create, update, or delete a verse at /verses/verse123.
     * @principle Provides public read access while restricting write operations.
     */
    match /verses/{verseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to daily shlokas. Write access is not permitted in this prototyping phase.
     * @path /dailyShlokas/{dailyShlokaId}
     * @allow (get, list) to all users.
     *   Example: Any user can read a daily shloka at /dailyShlokas/shloka123.
     * @deny (create, update, delete) to all users.
     *   Example: No user can create, update, or delete a daily shloka at /dailyShlokas/shloka123.
     * @principle Provides public read access while restricting write operations.
     */
    match /dailyShlokas/{dailyShlokaId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}