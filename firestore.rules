/**
 * @fileoverview Firestore Security Rules for the Sanskrit Verse application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a strict, path-based ownership model for user data while allowing public read access to shared verse data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with the 'userId' matching the Firebase Auth UID.
 * - /users/{userId}/userVerses/{userVerseId}: Subcollection for verses saved by each user, enforcing strict ownership.
 * - /verses/{verseId}: Stores all verses, accessible for public reading.
 * - /dailyShlokas/{dailyShlokaId}: Stores the Shloka of the Day.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to the 'verses' and 'dailyShlokas' collections, with owner-only writes (assuming an ownership field exists).
 *
 * Denormalization for Authorization:
 * - The `/users/{userId}/userVerses/{userVerseId}` subcollection uses path-based ownership (userId in the path) to avoid the need to store and validate a redundant `userId` field within the UserVerse document itself.
 *
 * Structural Segregation:
 * - User-specific, private data (user profiles and saved verses) are stored under the `/users/{userId}` path, while public verse data is stored in the top-level `/verses` and `/dailyShlokas` collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the user profiles collection.
     * @path /users/{userId}
     * @allow (create) - If the user's UID matches the userId, allowing self-creation.
     * @allow (get, update, delete) - If the user's UID matches the userId, allowing access to their own profile.
     * @deny (list) - Listing users is not permitted.
     * @deny (create, update, delete) - If the user's UID does not match the userId, preventing unauthorized access.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Protects the user verses subcollection.
     * @path /users/{userId}/userVerses/{userVerseId}
     * @allow (create, get, list, update, delete) - If the user's UID matches the userId, allowing access to their own saved verses.
     * @deny (create, get, list, update, delete) - If the user's UID does not match the userId, preventing unauthorized access.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/userVerses/{userVerseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to all verses.
     * @path /verses/{verseId}
     * @allow (get, list) - Allows anyone to read verses.
     * @deny (create, update, delete) - Prevents unauthorized modification of verses.
     * @principle Allows public read access but protects against unauthorized writes.
     */
    match /verses/{verseId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'Verse' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Allows public read access to daily shlokas.
     * @path /dailyShlokas/{dailyShlokaId}
     * @allow (get, list) - Allows anyone to read daily shlokas.
     * @deny (create, update, delete) - Prevents unauthorized modification of daily shlokas.
     * @principle Allows public read access but protects against unauthorized writes.
     */
    match /dailyShlokas/{dailyShlokaId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'DailyShloka' entity is missing an 'ownerId' or 'authorId' field.
    }
  }
}