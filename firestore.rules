/**
 * @fileoverview Firestore Security Rules for Sanskrit Verse Analysis App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * while allowing public read access to shared resources like verses and daily shlokas.
 * User data is isolated under their respective /users/{userId} path.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, with the userId matching the Firebase Auth UID.
 * - /users/{userId}/userVerses/{userVerseId}: Subcollection for verses saved by each user.
 * - /verses/{verseId}: Stores all verses, publicly readable.
 * - /dailyShlokas/{dailyShlokaId}: Stores the Shloka of the Day, publicly readable.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and saved verses.
 * - All verses and daily shlokas are publicly readable.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * - The `UserVerse` subcollection is nested under `/users/{userId}` to ensure that
 *   access can be controlled based on the path. No `get()` calls are required
 *   to determine ownership.
 *
 * Structural Segregation:
 * - User-specific verses are stored in a private subcollection (`/users/{userId}/userVerses`)
 *   while general verse data is stored in a public top-level collection (`/verses`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile if request.auth.uid == 'user_abc'
     * @allow (get, update, delete) User with UID 'user_abc' can read/write their profile.
     * @deny (create) User with UID 'user_xyz' cannot create a profile for 'user_abc'.
     * @deny (get, update, delete) User with UID 'user_xyz' cannot read/write the profile of 'user_abc'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Enforces access control for verses saved by users.  Only the owner can read/write verses saved in their profile.
     * @path /users/{userId}/userVerses/{userVerseId}
     * @allow (create) User with UID 'user_abc' can save a verse to their profile.
     * @allow (get, update, delete) User with UID 'user_abc' can read/write verses saved in their profile.
     * @deny (create) User with UID 'user_xyz' cannot save a verse to 'user_abc's profile.
     * @deny (get, update, delete) User with UID 'user_xyz' cannot read/write verses saved in 'user_abc's profile.
     * @principle Enforces strict user-ownership for saved verses.
     */
    match /users/{userId}/userVerses/{userVerseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to all verses. Write access is not allowed.
     * @path /verses/{verseId}
     * @allow (get, list) Any user can read verses.
     * @deny (create, update, delete) No user can create, update, or delete verses through the client.
     * @principle Provides public read access to shared verses.
     */
    match /verses/{verseId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to the Shloka of the Day. Write access is not allowed.
     * @path /dailyShlokas/{dailyShlokaId}
     * @allow (get, list) Any user can read the Shloka of the Day.
     * @deny (create, update, delete) No user can create, update, or delete the Shloka of the Day through the client.
     * @principle Provides public read access to the Shloka of the Day.
     */
    match /dailyShlokas/{dailyShlokaId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}