/**
 * @fileoverview Firestore Security Rules for the Sanskrit Verse Analysis App.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data (user profiles, saved verses),
 * while allowing public read access to shared data (verses, daily shlokas).  All write operations are
 * protected by authorization checks to ensure data integrity and prevent unauthorized modifications.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, with the document ID matching the Firebase Auth UID.
 * - /users/{userId}/userVerses/{userVerseId}:  Subcollection containing verses saved by each user,
 *   ensuring that only the owning user can access their saved verses.
 * - /verses/{verseId}: Stores all verses, publicly readable.
 * - /dailyShlokas/{dailyShlokaId}: Stores the Shloka of the Day, publicly readable.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - User-saved verses are private and only accessible to the owning user.
 * - All users can read all verses and daily shlokas, but only authorized users can create, update, or delete them (currently not implemented).
 * - Listing of all users is disallowed.
 *
 * Denormalization for Authorization:
 * - The `UserVerse` subcollection is nested under `/users/{userId}` to enforce path-based ownership. This avoids the need for `get()` calls to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profile data. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile.
     * @allow (get, update, delete) User with UID 'user_abc' can read/update/delete their own profile.
     * @deny (create) User with UID 'user_xyz' cannot create a profile with ID 'user_abc'.
     * @deny (get, update, delete) User with UID 'user_xyz' cannot read/update/delete the profile of user 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the user to create their own profile, matching the auth UID.
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow the user to get their own profile.
      allow get: if isOwner(userId);

      // Allow the user to update their own profile, enforcing immutability of the user ID.
      allow update: if isOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow the user to delete their own profile.
      allow delete: if isOwner(userId) && resource != null;

      // Disallow listing all users.
      allow list: if false;
    }

    /**
     * @description Secure user-saved verses. Only the authenticated user can read/write verses they have saved.
     * @path /users/{userId}/userVerses/{userVerseId}
     * @allow (create) User with UID 'user_abc' can save a verse to their profile.
     * @allow (get, update, delete) User with UID 'user_abc' can read/update/delete a verse they have saved.
     * @deny (create) User with UID 'user_xyz' cannot save a verse to the profile of user 'user_abc'.
     * @deny (get, update, delete) User with UID 'user_xyz' cannot read/update/delete a verse saved by user 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userVerses/{userVerseId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the user to create a new saved verse under their profile.
      allow create: if isOwner(userId) && request.resource.data.userId == userId;

      // Allow the user to get their saved verse.
      allow get: if isOwner(userId);

      // Allow the user to update their saved verse. The user ID MUST NOT be changed.
      allow update: if isOwner(userId) && resource != null && request.resource.data.userId == resource.data.userId;

      // Allow the user to delete their saved verse.
      allow delete: if isOwner(userId) && resource != null;

      // Allow the owner to list their saved verses.
      allow list: if isOwner(userId);
    }

    /**
     * @description Allow public read access to verses. Only authorized users can create, update, or delete them (currently not implemented).
     * @path /verses/{verseId}
     * @allow (get, list) Any user can read the verses.
     * @deny (create, update, delete) No one can create, update, or delete verses without authorization.
     * @principle Allows public read access with restricted write access.
     */
    match /verses/{verseId} {
      // Allow anyone to read verses.
      allow get, list: if true;

      // Disallow creating, updating, or deleting verses for now.
      allow create, update, delete: if false; // TODO: Add admin/editor validation if needed.
    }

    /**
     * @description Allow public read access to daily shlokas. Only authorized users can create, update, or delete them (currently not implemented).
     * @path /dailyShlokas/{dailyShlokaId}
     * @allow (get, list) Any user can read the daily shlokas.
     * @deny (create, update, delete) No one can create, update, or delete daily shlokas without authorization.
     * @principle Allows public read access with restricted write access.
     */
    match /dailyShlokas/{dailyShlokaId} {
      // Allow anyone to read the daily shlokas.
      allow get, list: if true;

      // Disallow creating, updating, or deleting daily shlokas for now.
      allow create, update, delete: if false; // TODO: Add admin/editor validation if needed.
    }
  }
}