/**
 * @fileoverview Firestore Security Rules for the Sanskrit Verse Analysis App.
 *
 * Core Philosophy:
 * This ruleset prioritizes a strict user-ownership model for personal data (user profiles, saved verses)
 * while allowing public read access to the core verse library. Write access to the verse library and daily
 * shlokas is currently open for prototyping but must be locked down later.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /users/{userId}/userVerses/{userVerseId}: Stores verses saved by a specific user, accessible only to that user.
 * - /verses/{verseId}: Stores the master verse library, publicly readable.
 * - /dailyShlokas/{dailyShlokaId}: Stores the Shloka of the Day, publicly readable.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - The verses collection is publicly readable to allow open access to the core content. Write rules for verses are currently open but MUST be secured in production.
 * - The dailyShlokas collection is publicly readable. Write rules are currently open but MUST be secured in production.
 * - Denormalization is used to simplify authorization checks, especially for user-owned data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) request.auth.uid == 'testUserId' and request.resource.data.id == 'testUserId'
     * @allow (get, update, delete) request.auth.uid == 'testUserId'
     * @deny (create) request.auth.uid != 'testUserId'
     * @deny (get, update, delete) request.auth.uid != 'testUserId'
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their saved verses.
     * @path /users/{userId}/userVerses/{userVerseId}
     * @allow (create) request.auth.uid == 'testUserId' and request.resource.data.userId == 'testUserId'
     * @allow (get, update, delete) request.auth.uid == 'testUserId'
     * @deny (create) request.auth.uid != 'testUserId'
     * @deny (get, update, delete) request.auth.uid != 'testUserId'
     * @principle Enforces path-based ownership for user-specific data.
     */
    match /users/{userId}/userVerses/{userVerseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to verses.  Write access is currently open but MUST be secured.
     * @path /verses/{verseId}
     * @allow (get, list) if true;
     * @allow (create, update, delete) if true; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Provides open access to the core verse library.
     */
    match /verses/{verseId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Secure writes to this collection.
    }

    /**
     * @description Allows public read access to daily shlokas. Write access is currently open but MUST be secured.
     * @path /dailyShlokas/{dailyShlokaId}
     * @allow (get, list) if true;
     * @allow (create, update, delete) if true; // TODO: Add validation
     */
    match /dailyShlokas/{dailyShlokaId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Secure writes to this collection.
    }
  }
}