/**
 * @fileoverview Firestore Security Rules for the Sanskrit Verse Analysis App.
 *
 * Core Philosophy:
 * This ruleset prioritizes a user-ownership model for personal data while allowing public read access to core content.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with the userId matching the Firebase Auth UID.
 * - /users/{userId}/userVerses/{userVerseId}: Subcollection for verses saved by the user, enforcing path-based ownership.
 * - /verses/{verseId}: Stores all verses, accessible for public reading but restricted for writing.
 * - /dailyShlokas/{dailyShlokaId}: Stores the daily shloka, publicly readable but restricted for writing.
 *
 * Key Security Decisions:
 * - User profiles are only readable and writable by the owning user.
 * - User-saved verses are stored in a subcollection under the user's profile and are only accessible by the owning user.
 * - The verses and dailyShlokas collections are publicly readable but writable only with proper authorization (TODO).
 *
 * Denormalization for Authorization:
 * - UserVerse documents are stored as a subcollection of the user's profile, enabling path-based authorization and eliminating the need for `get()` calls.
 *
 * Structural Segregation:
 * - User-specific data (userVerses) is stored in a private subcollection under the user's profile, while general content (verses, dailyShlokas) is stored in top-level collections for public access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the user profiles, ensuring only the owner can read and write their own profile.
     * @path /users/{userId}
     * @allow (create, update, get, delete, list) if the user is signed in and the userId matches the authenticated user's UID.
     * @deny (create, update, get, delete) if the userId does not match the authenticated user's UID.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing of all user profiles

      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures the user's saved verses, ensuring only the owner can read and write their own saved verses.
     * @path /users/{userId}/userVerses/{userVerseId}
     * @allow (create, update, get, delete, list) if the user is signed in and the userId matches the authenticated user's UID.
     * @deny (create, update, get, delete) if the userId does not match the authenticated user's UID.
     * @principle Enforces document ownership through path-based rules, restricting access to a user's own data tree.
     */
    match /users/{userId}/userVerses/{userVerseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures the verses collection, allowing public read access but restricting write access to authorized users (TODO).
     * @path /verses/{verseId}
     * @allow (get, list) to all users.
     * @deny (create, update, delete) to unauthorized users.
     * @principle Allows public read access while enforcing owner-only writes (TODO).
     */
    match /verses/{verseId} {
      allow get: if true;
      allow list: if true;

      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Secures the dailyShlokas collection, allowing public read access but restricting write access to authorized users (TODO).
     * @path /dailyShlokas/{dailyShlokaId}
     * @allow (get, list) to all users.
     * @deny (create, update, delete) to unauthorized users.
     * @principle Allows public read access while enforcing owner-only writes (TODO).
     */
    match /dailyShlokas/{dailyShlokaId} {
      allow get: if true;
      allow list: if true;

      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }
  }

  // Helper function to determine if the current user is the owner of the resource.
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}